side=3, at=seq(from=20, to=200, by=20), cex=.7, col = 'red')
mtext(probs2,
side = 3, at=seq(from=20, to=200, by=20), cex = .7, line = .6)
mtext(c(20,40,60,80,100,120,140,160,180,200), side=1,
at=c(20,40,60,80,100,120,140,160,180,200), cex=.85)
mtext("Taxa", side=1, line=1)
mtext("p-value", side=2, line=2.2)
abline(h = .025, lty = 2, lwd = .7, col = 'red')
abline(h = .05, lty = 2, lwd = .7)
probs <- vector()
probs2 <- vector()
for(i in 1:10){
probs[i] <- paste(
as.character(
round(100 * sum(y[(200 * (i - 1) + 1):(200 * i)] <= .025, na.rm = T) / sum(!is.na(y[(200 * (i - 1) + 1):(200 * i)])),
digits = 1)),'%')
probs2[i] <- paste(
as.character(
round(100 * sum(y[(200 * (i - 1) + 1):(200 * i)] <= .05, na.rm = T) / sum(!is.na(y[(200 * (i - 1) + 1):(200 * i)])),
digits = 1)),'%')
}
plot(x = x, y = y, xlab="", ylab= "", xaxt="n",
pch=16,cex=.6, xlim=c(10, 210))
mtext(probs,
side=3, at=seq(from=20, to=200, by=20), cex=.7, col = 'red')
mtext(probs2,
side = 3, at=seq(from=20, to=200, by=20), cex = .7, line = .6)
mtext(c(20,40,60,80,100,120,140,160,180,200), side=1,
at=c(20,40,60,80,100,120,140,160,180,200), cex=.85)
mtext("Taxa", side=1, line=1)
mtext("p-value", side=2, line=2.2)
abline(h = .025, lty = 2, lwd = .7, col = 'red')
abline(h = .05, lty = 2, lwd = .7)
load("C:/Users/19726/Desktop/GitHub/Ancestral-Condition-Test/Data/AncCondFig5DataPostBlackmonp3.RData")
x <- rep(seq(from=20, to=200, by=20), each=200)
x <- jitter(x, factor=1.5)
y <- vector()
for(i in 1:10){
for(j in 1:10){
for(i in 1:100){
y[2 * (100 * (j - 1) + i - 1) + 1] <- as.numeric(gsub(",.*", "",fig5.data[i,j]))
y[2 * (100 * (j - 1) + i - 1) + 2] <- as.numeric(substr(fig5.data[i,j], (nchar(gsub(",.*", "",fig5.data[i,j])) + 2),
nchar(fig5.data[i,j])))
}
}
}
probs <- vector()
probs2 <- vector()
for(i in 1:10){
probs[i] <- paste(
as.character(
round(100 * sum(y[(200 * (i - 1) + 1):(200 * i)] <= .025, na.rm = T) / sum(!is.na(y[(200 * (i - 1) + 1):(200 * i)])),
digits = 1)),'%')
probs2[i] <- paste(
as.character(
round(100 * sum(y[(200 * (i - 1) + 1):(200 * i)] <= .05, na.rm = T) / sum(!is.na(y[(200 * (i - 1) + 1):(200 * i)])),
digits = 1)),'%')
}
plot(x = x, y = y, xlab="", ylab= "", xaxt="n",
pch=16,cex=.6, xlim=c(10, 210))
mtext(probs,
side=3, at=seq(from=20, to=200, by=20), cex=.7, col = 'red')
mtext(probs2,
side = 3, at=seq(from=20, to=200, by=20), cex = .7, line = .6)
mtext(c(20,40,60,80,100,120,140,160,180,200), side=1,
at=c(20,40,60,80,100,120,140,160,180,200), cex=.85)
mtext("Taxa", side=1, line=1)
mtext("p-value", side=2, line=2.2)
abline(h = .025, lty = 2, lwd = .7, col = 'red')
abline(h = .05, lty = 2, lwd = .7)
sum(is.na(y))
load("C:/Users/19726/Desktop/GitHub/Ancestral-Condition-Test/Depreciated/AncCondFig4DataPostBlackmonNAheavy (1).RData")
load("C:/Users/19726/Desktop/GitHub/Ancestral-Condition-Test/Depreciated/AncCondFig4DataPostBlackmonNAheavy (2).RData")
x <- rep(1:10, each=200)
x <- jitter(x, factor=1.5)
y <- vector()
for(j in 1:10){
for(i in 1:100){
y[2 * (100 * (j - 1) + i - 1) + 1] <- as.numeric(gsub(",.*", "",fig4.data[i,j]))
y[2 * (100 * (j - 1) + i - 1) + 2] <- as.numeric(substr(fig4.data[i,j], (nchar(gsub(",.*", "",fig4.data[i,j])) + 2),
nchar(fig4.data[i,j])))
}
}
sum(is.na(y))
load("C:/Users/19726/Desktop/GitHub/Ancestral-Condition-Test/Data/AncCondFig4DataPostBlackmon.RData")
x <- rep(seq(from=20, to=200, by=20), each=100)
x <- jitter(x, factor=1.5)
y <- vector()
for(i in 1:10){
y <- c(y, fig3.data[1:100, i])
}
x <- rep(1:10, each=200)
x <- jitter(x, factor=1.5)
y <- vector()
for(j in 1:10){
for(i in 1:100){
y[2 * (100 * (j - 1) + i - 1) + 1] <- as.numeric(gsub(",.*", "",fig4.data[i,j]))
y[2 * (100 * (j - 1) + i - 1) + 2] <- as.numeric(substr(fig4.data[i,j], (nchar(gsub(",.*", "",fig4.data[i,j])) + 2),
nchar(fig4.data[i,j])))
}
}
sum(is.na(y))
load("C:/Users/19726/Desktop/GitHub/Ancestral-Condition-Test/Data/AncCondFig4DataPostBlackmonp3.RData")
x <- rep(1:10, each=200)
x <- jitter(x, factor=1.5)
y <- vector()
for(j in 1:10){
for(i in 1:100){
y[2 * (100 * (j - 1) + i - 1) + 1] <- as.numeric(gsub(",.*", "",fig4.data[i,j]))
y[2 * (100 * (j - 1) + i - 1) + 2] <- as.numeric(substr(fig4.data[i,j], (nchar(gsub(",.*", "",fig4.data[i,j])) + 2),
nchar(fig4.data[i,j])))
}
}
sum(is.na(y))
load("C:/Users/19726/Desktop/GitHub/Ancestral-Condition-Test/Data/AncCondFig5DataPostBlackmon.RData")
x <- rep(seq(from=20, to=200, by=20), each=200)
x <- jitter(x, factor=1.5)
y <- vector()
for(i in 1:10){
for(j in 1:10){
for(i in 1:100){
y[2 * (100 * (j - 1) + i - 1) + 1] <- as.numeric(gsub(",.*", "",fig5.data[i,j]))
y[2 * (100 * (j - 1) + i - 1) + 2] <- as.numeric(substr(fig5.data[i,j], (nchar(gsub(",.*", "",fig5.data[i,j])) + 2),
nchar(fig5.data[i,j])))
}
}
}
sum(is.na(y))
load("C:/Users/19726/Desktop/GitHub/Ancestral-Condition-Test/Data/AncCondFig5DataPostBlackmonp3.RData")
sum(is.na(y))
x <- rep(seq(from=20, to=200, by=20), each=200)
x <- jitter(x, factor=1.5)
y <- vector()
for(i in 1:10){
for(j in 1:10){
for(i in 1:100){
y[2 * (100 * (j - 1) + i - 1) + 1] <- as.numeric(gsub(",.*", "",fig5.data[i,j]))
y[2 * (100 * (j - 1) + i - 1) + 2] <- as.numeric(substr(fig5.data[i,j], (nchar(gsub(",.*", "",fig5.data[i,j])) + 2),
nchar(fig5.data[i,j])))
}
}
}
sum(is.na(y))
2000/278
load("C:/Users/19726/Desktop/GitHub/Ancestral-Condition-Test/Data/AncCondFig5DataPostBlackmon.RData")
x <- rep(seq(from=20, to=200, by=20), each=200)
x <- jitter(x, factor=1.5)
y <- vector()
for(i in 1:10){
for(j in 1:10){
for(i in 1:100){
y[2 * (100 * (j - 1) + i - 1) + 1] <- as.numeric(gsub(",.*", "",fig5.data[i,j]))
y[2 * (100 * (j - 1) + i - 1) + 2] <- as.numeric(substr(fig5.data[i,j], (nchar(gsub(",.*", "",fig5.data[i,j])) + 2),
nchar(fig5.data[i,j])))
}
}
}
sum(is.na(y))
2000/312
2000/278
312/2000
278/2000
load("C:/Users/19726/Desktop/GitHub/Ancestral-Condition-Test/Data/AncCondFig4DataPostBlackmon.RData")
load("C:/Users/19726/Desktop/GitHub/Ancestral-Condition-Test/Data/AncCondFig4DataPostBlackmon.RData")
x <- rep(1:10, each=200)
x <- jitter(x, factor=1.5)
y <- vector()
for(j in 1:10){
for(i in 1:100){
y[2 * (100 * (j - 1) + i - 1) + 1] <- as.numeric(gsub(",.*", "",fig4.data[i,j]))
y[2 * (100 * (j - 1) + i - 1) + 2] <- as.numeric(substr(fig4.data[i,j], (nchar(gsub(",.*", "",fig4.data[i,j])) + 2),
nchar(fig4.data[i,j])))
}
}
sum(is.na(y))
load("C:/Users/19726/Desktop/GitHub/Ancestral-Condition-Test/Data/AncCondFig4DataPostBlackmonp3.RData")
x <- rep(1:10, each=200)
x <- jitter(x, factor=1.5)
y <- vector()
for(j in 1:10){
for(i in 1:100){
y[2 * (100 * (j - 1) + i - 1) + 1] <- as.numeric(gsub(",.*", "",fig4.data[i,j]))
y[2 * (100 * (j - 1) + i - 1) + 2] <- as.numeric(substr(fig4.data[i,j], (nchar(gsub(",.*", "",fig4.data[i,j])) + 2),
nchar(fig4.data[i,j])))
}
}
sum(is.na(y))
2000/162
162/2000
147/2000
setwd("C:/Users/19726/Desktop/GitHub/Ancestral-Condition-Test")
tree <- read.tree(file = 'Data/whales.tre')
library(R.utils)
library(phytools)
library(diversitree)
library(geiger)
library(doSNOW)
library(foreach)
tree <- read.tree(file = 'Data/whales.tre')
sizes <- read.csv('Data/whale_sizes.csv')
source('AncCond.R')
cl<-makeCluster(3, type="SOCK")
on.exit(stopCluster(cl))
opts <- list(preschedule = FALSE)
registerDoSNOW(cl)
reordered.sizes <- rep(NA, length = length(tree$tip.label))
names(reordered.sizes) <- tree$tip.label
for(i in 1:length(sizes$Australophocaena.dioptrica)){
reordered.sizes[match(gsub( ' ', '_', as.character(sizes$Australophocaena.dioptrica[[i]])),
names(reordered.sizes))] <- sizes$X1.86[[i]]
# if(is.na(match(gsub( ' ', '_', as.character(sizes$Australophocaena.dioptrica[[i]])),
#                 names(reordered.sizes)))){stop(cat('i = ',i))}
}
sig.vector <- foreach(i = 1:100, .options.multicore=opts, .combine = 'c',
.packages=c("phytools","diversitree","geiger")) %dopar% {
good.sim <- F
rate <- .1
while(good.sim == F){
disc.trait <- sim.char(phy = tree,
par = matrix(c(-rate, 0, rate, 0), 2),
model = 'discrete',
root = 1)
if(5 < sum(disc.trait == min(disc.trait)) &&
sum(disc.trait == min(disc.trait)) < (length(tree$tip.label) - 5)){
good.sim <- T
}
}
dat <- cbind(tree$tip.label, reordered.sizes, disc.trait)
rslt <- AncCond(trees = tree,
data = dat,
drop.state = 2,
mat = c(0,0,1,0),
pi = c(1,0),
message = T)
rslt$pval < .05
}
paste('With no relation the AncCond reportedsignificant correlation ', sum(sig.vector), '% of the time.')
ct.vec <- reordered.sizes[!is.na(reordered.sizes)]
# this is the exact same as FIG3 but with a scaling factor of 0 to find fp rate
library(R.utils)
library(phytools)
library(diversitree)
library(geiger)
library(doSNOW)
library(foreach)
cl<-makeCluster(3, type="SOCK")
on.exit(stopCluster(cl))
opts <- list(preschedule = FALSE)
registerDoSNOW(cl)
n.trees <- 100
scale.factor <- 5
n.taxa <- seq(20, 200, length.out = 10)
message <- T
source('AncCond.R', local = TRUE)
p.val.array <-foreach(s = 1:length(n.taxa), .options.multicore=opts, .combine = 'cbind',
.packages=c("phytools","diversitree","geiger")) %dopar%{
p.val.vec <- c()
# for each tree size we repeat the same analysis for the same number of trees
for(t in 1:n.trees){
# good.tree <- F
# while(good.tree == F){
# some trees take a real long time for simulating discrete traits due to incredibly short branch lengths where a transition
#   must occur. To get around this we added a timeout and trycatch. In the event of a tree that is taking an unacceptable time,
#   we begin back here by resimulating a tree
# tryCatch({
# We begin with a single tree and test it at every scaling factor then move to the next tree
# first the tree
trees <- trees(pars = c(3,1),
type = "bd",
n = 1,
max.taxa = n.taxa[s],
include.extinct = F)[[1]]
trees$edge.length <- trees$edge.length / max(branching.times(trees))
# we then simulate the continious character
cont.trait <- sim.char(trees, 0.2, model = 'BM')
names(cont.trait) <- trees$tip.label # this line somehow makes anc.ML work????
# identifying which branch had a mean cont trait value in the upper and lower quartiles
# we do this by 1st doing an ASR for the continious trait
cont.trait.AC <- anc.ML(trees, cont.trait, model = "BM")
# this will hold all of the branch means in the same order they are given in trees
branch.means <- c()
# branch names is essentially paste(rootward node, tipward node)
branch.names <- c()
# then for each branch we go through and calculate the name and mean
for(j in 1:nrow(trees$edge)){
# we first find the cont trait value at the rootward node
node.o.int <- trees$edge[j,1]
# we have to look in two different places for cont trait values, either in the cont.trait vector
# (if the node is a tip) or in the ASR if it is an interior node
if(node.o.int <= n.taxa[s]){
one <- cont.trait[node.o.int]
}else{
one <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# we do the same for the tipward node
node.o.int <- trees$edge[j,2]
if(node.o.int <= n.taxa[s]){
two <- cont.trait[node.o.int]
}else{
two <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# to find the mean we avg the rootward and the tipward cont trait values
branch.means <- c(branch.means, mean(one, two))
# we create branch names by pasting the rootwward and tipward node labels together
branch.names <- c(branch.names, paste(as.character(trees$edge[j,1]),as.character(trees$edge[j,2])))
}
# we name the branch names for nice bookkeeping
names(branch.means) <- branch.names
rm(branch.names)
# finding upper and lower quartiles
upper <- summary(branch.means)[[5]]
lower <- summary(branch.means)[[2]]
alt.tree <- trees
# we then manipulate the branch lengths of those branches whose cont trait means are in the upper or lower quartiles
for(j in 1:length(branch.means)){
if(branch.means[j] < lower){alt.tree$edge.length[j] <- alt.tree$edge.length[j] / scale.factor}
if(branch.means[j] > upper){alt.tree$edge.length[j] <- alt.tree$edge.length[j] * scale.factor}
}
# next we simulated a discrete trait on this altered tree
# while loop is set up to make sure sufficient transitions occur on the tree
good.sim <- F
# count <- 0
rate <- .1
# withTimeout({
while(good.sim == F){
disc.trait <- sim.char(phy = alt.tree,
par = matrix(c(-rate, 0, rate, 0), 2),
model = 'discrete',
root = 1)
if(5 < sum(disc.trait == min(disc.trait)) &&
sum(disc.trait == min(disc.trait)) < (n.taxa[s] - 5)){
good.sim <- T
# if(message == T){cat(min(disc.trait), max(disc.trait), ' good sim ')}
}
# if(message == T && count %% 50 == 0){cat(min(disc.trait),
#                                          max(disc.trait),
#                                          '    ',
#                                          sum(disc.trait == min(disc.trait)),
#                                          '      ')}
# count <- count + 1
} # }, timeout = 360, onTimeout = "error")
if(message == T){cat('\n')}
# we now apply the AncCond test to our simulated data and record its result
dat <- cbind(alt.tree$tip.label, cont.trait, disc.trait)
# withTimeout({
rslt <- AncCond(trees = trees,
data = dat,
drop.state = 2,
mat = c(0,0,1,0),
pi = c(1,0),
message = F)# },
# timeout = 600, onTimeout = "error")
# saving results in arrays
# p.val.array[t,s] <- rslt$pval
if(message == T){cat('\n')}
# closting the while loop if all goes well
# good.tree <- T
# }, error = function(e){good.tree <- F})
# }
if(message == T){
cat('\n')
cat(' t = ', t)
}
p.val.vec[t] <- rslt$pval
}
if(message == T){
cat('\n')
cat(' s = ', s)
}
p.val.vec
# end <- sys.time
}
# this is the exact same as FIG3 but with a scaling factor of 1 to find fp rate
library(R.utils)
library(phytools)
library(diversitree)
library(geiger)
library(doSNOW)
library(foreach)
cl<-makeCluster(3, type="SOCK")
on.exit(stopCluster(cl))
opts <- list(preschedule = FALSE)
registerDoSNOW(cl)
n.trees <- 100
scale.factor <- 1
n.taxa <- seq(20, 200, length.out = 10)
message <- T
source('AncCond.R', local = TRUE)
##### Making fig3 ######
## this will hold the p.val for each of 100 tests for the 10 tree sizes
# p.val.array <- array(dim = c(n.trees, 10))
# this time we vary the size of the tree
p.val.array <-foreach(s = 1:length(n.taxa), .options.multicore=opts, .combine = 'cbind',
.packages=c("phytools","diversitree","geiger")) %dopar%{
p.val.vec <- c()
# for each tree size we repeat the same analysis for the same number of trees
for(t in 1:n.trees){
# good.tree <- F
# while(good.tree == F){
# some trees take a real long time for simulating discrete traits due to incredibly short branch lengths where a transition
#   must occur. To get around this we added a timeout and trycatch. In the event of a tree that is taking an unacceptable time,
#   we begin back here by resimulating a tree
# tryCatch({
# We begin with a single tree and test it at every scaling factor then move to the next tree
# first the tree
trees <- trees(pars = c(3,1),
type = "bd",
n = 1,
max.taxa = n.taxa[s],
include.extinct = F)[[1]]
trees$edge.length <- trees$edge.length / max(branching.times(trees))
# we then simulate the continious character
cont.trait <- sim.char(trees, 0.2, model = 'BM')
names(cont.trait) <- trees$tip.label # this line somehow makes anc.ML work????
# identifying which branch had a mean cont trait value in the upper and lower quartiles
# we do this by 1st doing an ASR for the continious trait
cont.trait.AC <- anc.ML(trees, cont.trait, model = "BM")
# this will hold all of the branch means in the same order they are given in trees
branch.means <- c()
# branch names is essentially paste(rootward node, tipward node)
branch.names <- c()
# then for each branch we go through and calculate the name and mean
for(j in 1:nrow(trees$edge)){
# we first find the cont trait value at the rootward node
node.o.int <- trees$edge[j,1]
# we have to look in two different places for cont trait values, either in the cont.trait vector
# (if the node is a tip) or in the ASR if it is an interior node
if(node.o.int <= n.taxa[s]){
one <- cont.trait[node.o.int]
}else{
one <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# we do the same for the tipward node
node.o.int <- trees$edge[j,2]
if(node.o.int <= n.taxa[s]){
two <- cont.trait[node.o.int]
}else{
two <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# to find the mean we avg the rootward and the tipward cont trait values
branch.means <- c(branch.means, mean(one, two))
# we create branch names by pasting the rootwward and tipward node labels together
branch.names <- c(branch.names, paste(as.character(trees$edge[j,1]),as.character(trees$edge[j,2])))
}
# we name the branch names for nice bookkeeping
names(branch.means) <- branch.names
rm(branch.names)
# finding upper and lower quartiles
upper <- summary(branch.means)[[5]]
lower <- summary(branch.means)[[2]]
alt.tree <- trees
# we then manipulate the branch lengths of those branches whose cont trait means are in the upper or lower quartiles
for(j in 1:length(branch.means)){
if(branch.means[j] < lower){alt.tree$edge.length[j] <- alt.tree$edge.length[j] / scale.factor}
if(branch.means[j] > upper){alt.tree$edge.length[j] <- alt.tree$edge.length[j] * scale.factor}
}
# next we simulated a discrete trait on this altered tree
# while loop is set up to make sure sufficient transitions occur on the tree
good.sim <- F
# count <- 0
rate <- .1
# withTimeout({
while(good.sim == F){
disc.trait <- sim.char(phy = alt.tree,
par = matrix(c(-rate, 0, rate, 0), 2),
model = 'discrete',
root = 1)
if(5 < sum(disc.trait == min(disc.trait)) &&
sum(disc.trait == min(disc.trait)) < (n.taxa[s] - 5)){
good.sim <- T
# if(message == T){cat(min(disc.trait), max(disc.trait), ' good sim ')}
}
# if(message == T && count %% 50 == 0){cat(min(disc.trait),
#                                          max(disc.trait),
#                                          '    ',
#                                          sum(disc.trait == min(disc.trait)),
#                                          '      ')}
# count <- count + 1
} # }, timeout = 360, onTimeout = "error")
if(message == T){cat('\n')}
# we now apply the AncCond test to our simulated data and record its result
dat <- cbind(alt.tree$tip.label, cont.trait, disc.trait)
# withTimeout({
rslt <- AncCond(trees = trees,
data = dat,
drop.state = 2,
mat = c(0,0,1,0),
pi = c(1,0),
message = F)# },
# timeout = 600, onTimeout = "error")
# saving results in arrays
# p.val.array[t,s] <- rslt$pval
if(message == T){cat('\n')}
# closting the while loop if all goes well
# good.tree <- T
# }, error = function(e){good.tree <- F})
# }
if(message == T){
cat('\n')
cat(' t = ', t)
}
p.val.vec[t] <- rslt$pval
}
if(message == T){
cat('\n')
cat(' s = ', s)
}
p.val.vec
# end <- sys.time
}
fig3.data <- p.val.array
save(fig3.data, file = 'AncCondntaxaData.RData')
