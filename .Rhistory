while(good.sim == F){
disc.trait <- sim.char(phy = trees,
par = matrix(c(-rate, 0, rate, 0), 2),
model = 'discrete',
root = 1)
if(4 < sum(disc.trait == min(disc.trait)) &&
sum(disc.trait == min(disc.trait)) < 26){
good.sim <- T
}
}
good.sim <- F
rate <- .1
while(good.sim == F){
disc.trait <- sim.char(phy = trees,
par = matrix(c(-rate, 0, rate, 0), 2),
model = 'discrete',
root = 1)
if(4 < sum(disc.trait == min(disc.trait)) &&
sum(disc.trait == min(disc.trait)) < 26){
good.sim <- T
}
}
names(disc.trait) <- trees$tip.label
anc.state.dt <- make.simmap(trees, disc.trait,
model = matrix(c(0,0,1,0), 2),
nsim = 1,
pi = c(1,0),
message = F)
plot(anc.state.dt)
legend(x = 'bottomleft', legend = c('Ancestral','Derived'), col = c('black', 'red'), pch = 15)
good.sim <- F
rate <- .1
while(good.sim == F){
disc.trait <- sim.char(phy = trees,
par = matrix(c(-rate, 0, rate, 0), 2),
model = 'discrete',
root = 1)
if(4 < sum(disc.trait == min(disc.trait)) &&
sum(disc.trait == min(disc.trait)) < 26){
good.sim <- T
}
}
names(disc.trait) <- trees$tip.label
anc.state.dt <- make.simmap(trees, disc.trait,
model = matrix(c(0,0,1,0), 2),
nsim = 1,
pi = c(1,0),
message = F)
plot(anc.state.dt)
legend(x = 'bottomleft', legend = c('Ancestral','Derived'), col = c('black', 'red'), pch = 15)
save(trees, file = 'Fig1Tree.RData')
save(cont.trait, Fig1ContTrait.RData)
save(cont.trait, file = 'Fig1ContTrait.RData')
setwd("C:/Users/19726/Desktop/GitHub/Ancestral-Condition-Test/Data")
save(trees, file = 'Fig1Tree.RData')
save(cont.trait, file = 'Fig1ContTrait.RData')
save(anc.state.dt, 'Fig1DiscSimMap.RData')
save(anc.state.dt, file = 'Fig1DiscSimMap.RData')
#      sum(disc.trait == min(disc.trait)) < 26){
#     good.sim <- T
#   }
# }
# names(disc.trait) <- trees$tip.label
# anc.state.dt <- make.simmap(trees, disc.trait,
#                             model = matrix(c(0,0,1,0), 2),
#                             nsim = 1,
#                             pi = c(1,0),
#                             message = F)
load('Fig1DiscSimMap.RData')
##### Fig 1 #####
par(mfrow = c(2,2))
# trees <- trees(pars = c(3,1),
#                        type = "bd",
#                        n = 1,
#                        max.taxa = 30,
#                        include.extinct = F)[[1]]
# trees$edge.length <- trees$edge.length / max(branching.times(trees))
# cont.trait <- sim.char(trees, 0.2, model = 'BM')
# names(cont.trait) <- trees$tip.label
load('Fig1Tree.RData')
load('Fig1ContTrait.RData')
smp <- contMap(trees,cont.trait, ftype = 'off', legend = F)
fig_label('A:',cex = 2.5)
fig_label <- function(text, region="figure", pos="topleft", cex=NULL, ...) {
region <- match.arg(region, c("figure", "plot", "device"))
pos <- match.arg(pos, c("topleft", "top", "topright",
"left", "center", "right",
"bottomleft", "bottom", "bottomright"))
if(region %in% c("figure", "device")) {
ds <- dev.size("in")
# xy coordinates of device corners in user coordinates
x <- grconvertX(c(0, ds[1]), from="in", to="user")
y <- grconvertY(c(0, ds[2]), from="in", to="user")
# fragment of the device we use to plot
if(region == "figure") {
# account for the fragment of the device that
# the figure is using
fig <- par("fig")
dx <- (x[2] - x[1])
dy <- (y[2] - y[1])
x <- x[1] + dx * fig[1:2]
y <- y[1] + dy * fig[3:4]
}
}
# much simpler if in plotting region
if(region == "plot") {
u <- par("usr")
x <- u[1:2]
y <- u[3:4]
}
sw <- strwidth(text, cex=cex) * 60/100
sh <- strheight(text, cex=cex) * 60/100
x1 <- switch(pos,
topleft     =x[1] + sw,
left        =x[1] + sw,
bottomleft  =x[1] + sw,
top         =(x[1] + x[2])/2,
center      =(x[1] + x[2])/2,
bottom      =(x[1] + x[2])/2,
topright    =x[2] - sw,
right       =x[2] - sw,
bottomright =x[2] - sw)
y1 <- switch(pos,
topleft     =y[2] - sh,
top         =y[2] - sh,
topright    =y[2] - sh,
left        =(y[1] + y[2])/2,
center      =(y[1] + y[2])/2,
right       =(y[1] + y[2])/2,
bottomleft  =y[1] + sh,
bottom      =y[1] + sh,
bottomright =y[1] + sh)
old.par <- par(xpd=NA)
on.exit(par(old.par))
text(x1, y1, text, cex=cex, ...)
return(invisible(c(x,y)))
}
smp <- contMap(trees,cont.trait, ftype = 'off', legend = F)
##### Fig 1 #####
par(mfrow = c(2,2))
# trees <- trees(pars = c(3,1),
#                        type = "bd",
#                        n = 1,
#                        max.taxa = 30,
#                        include.extinct = F)[[1]]
# trees$edge.length <- trees$edge.length / max(branching.times(trees))
# cont.trait <- sim.char(trees, 0.2, model = 'BM')
# names(cont.trait) <- trees$tip.label
load('Fig1Tree.RData')
load('Fig1ContTrait.RData')
smp <- contMap(trees,cont.trait, ftype = 'off', legend = F)
fig_label('A:',cex = 2.5)
#      sum(disc.trait == min(disc.trait)) < 26){
#     good.sim <- T
#   }
# }
# names(disc.trait) <- trees$tip.label
# anc.state.dt <- make.simmap(trees, disc.trait,
#                             model = matrix(c(0,0,1,0), 2),
#                             nsim = 1,
#                             pi = c(1,0),
#                             message = F)
load('Fig1DiscSimMap.RData')
plot(anc.state.dt)
legend(x = 'bottomleft', legend = c('Ancestral','Derived'), col = c('black', 'red'), pch = 15)
fig_label('B:',cex = 2.5)
plot(anc.state.dt, lwd = 2)
plot(anc.state.dt, lwd = 4)
plot(anc.state.dt, lwd = 3)
plot(anc.state.dt, lwd = 3, ftype = F)
plotSimmap(anc.state.dt, lwd = 3, tip)
plotSimmap(anc.state.dt, lwd = 3)
plotSimmap(anc.state.dt, lwd = 3, ftype = F)
plotSimmap(anc.state.dt, lwd = 3, ftype = 'off')
##### Fig 1 #####
par(mfrow = c(2,2))
# trees <- trees(pars = c(3,1),
#                        type = "bd",
#                        n = 1,
#                        max.taxa = 30,
#                        include.extinct = F)[[1]]
# trees$edge.length <- trees$edge.length / max(branching.times(trees))
# cont.trait <- sim.char(trees, 0.2, model = 'BM')
# names(cont.trait) <- trees$tip.label
load('Fig1Tree.RData')
load('Fig1ContTrait.RData')
smp <- contMap(trees,cont.trait, ftype = 'off', legend = F)
fig_label('A:',cex = 2.5)
#      sum(disc.trait == min(disc.trait)) < 26){
#     good.sim <- T
#   }
# }
# names(disc.trait) <- trees$tip.label
# anc.state.dt <- make.simmap(trees, disc.trait,
#                             model = matrix(c(0,0,1,0), 2),
#                             nsim = 1,
#                             pi = c(1,0),
#                             message = F)
load('Fig1DiscSimMap.RData')
plotSimmap(anc.state.dt, lwd = 3, ftype = 'off')
legend(x = 'bottomleft', legend = c('Ancestral','Derived'), col = c('black', 'red'), pch = 15)
fig_label('B:',cex = 2.5)
##### Fig 2 #####
load('AncCondFig2DataPostBlackmon.RData')
x <- rep(1:10, each=100)
x <- jitter(x, factor=1.5)
y <- vector()
for(i in 1:10){
y <- c(y, fig2.data[1:100, i])
}
probs <- vector()
for(i in 1:10){
probs[i] <- paste(as.character(sum(fig2.data[1:100, i] <= .05)),'%')
}
plot(x = x, y = y, xaxt="n",xlab="", ylab= "", pch=16,cex=.7)
mtext(probs, side=3, at=1:10, cex=.7)
mtext(1:10, side=1, at=1:10, cex=.85)
mtext("Scaling Factor", side=1, line=1)
mtext("p-value", side=2, line=2.2)
abline(h = .05, lty = 2, lwd = .7)
##### Fig 3 #####
load('AncCondFig3DataPostBlackmon.RData')
x <- rep(seq(from=20, to=200, by=20), each=100)
x <- jitter(x, factor=1.5)
y <- vector()
for(i in 1:10){
y <- c(y, fig3.data[1:100, i])
}
probs <- vector()
for(i in 1:10){
probs[i] <- paste(as.character(sum(fig3.data[1:100, i] <= .05)),'%')
}
plot(x = x, y = y, xlab="", ylab= "", xaxt="n",
pch=16,cex=.7, xlim=c(10, 210))
mtext(probs,
side=3, at=seq(from=20, to=200, by=20), cex=.7)
mtext(c(20,40,60,80,100,120,140,160,180,200), side=1,
at=c(20,40,60,80,100,120,140,160,180,200), cex=.85)
mtext("Taxa", side=1, line=1)
mtext("p-value", side=2, line=2.2)
abline(h = .05, lty = 2, lwd = .7)
# HPRCAncCondFIG3 <- function(){
# install.packages("phytools")
# install.packages("diversitree")
# install.packages("geiger")
# install.packages(c("Rmpi", 'doMPI'))
# library(doMPI)
# library(Rmpi)
library(R.utils)
library(phytools)
library(diversitree)
library(geiger)
library(doSNOW)
library(foreach)
cl<-makeCluster(3, type="SOCK")
on.exit(stopCluster(cl))
opts <- list(preschedule = FALSE)
registerDoSNOW(cl)
n.trees <- 100
scale.factor <- 5
n.taxa <- seq(20, 200, length.out = 10)
message <- T
source('AncCond.R', local = TRUE)
setwd("C:/Users/19726/Desktop/GitHub/Ancestral-Condition-Test")
source('AncCond.R', local = TRUE)
p.val.array <-foreach(s = 1:length(n.taxa), .options.multicore=opts, .combine = 'cbind',
.packages=c("phytools","diversitree","geiger")) %dopar%{
p.val.vec <- c()
# for each tree size we repeat the same analysis for the same number of trees
for(t in 1:n.trees){
# good.tree <- F
# while(good.tree == F){
# some trees take a real long time for simulating discrete traits due to incredibly short branch lengths where a transition
#   must occur. To get around this we added a timeout and trycatch. In the event of a tree that is taking an unacceptable time,
#   we begin back here by resimulating a tree
# tryCatch({
# We begin with a single tree and test it at every scaling factor then move to the next tree
# first the tree
trees <- trees(pars = c(3,1),
type = "bd",
n = 1,
max.taxa = n.taxa[s],
include.extinct = F)[[1]]
trees$edge.length <- trees$edge.length / max(branching.times(trees))
# we then simulate the continious character
cont.trait <- sim.char(trees, 0.2, model = 'BM')
names(cont.trait) <- trees$tip.label # this line somehow makes anc.ML work????
# identifying which branch had a mean cont trait value in the upper and lower quartiles
# we do this by 1st doing an ASR for the continious trait
cont.trait.AC <- anc.ML(trees, cont.trait, model = "BM")
# this will hold all of the branch means in the same order they are given in trees
branch.means <- c()
# branch names is essentially paste(rootward node, tipward node)
branch.names <- c()
# then for each branch we go through and calculate the name and mean
for(j in 1:nrow(trees$edge)){
# we first find the cont trait value at the rootward node
node.o.int <- trees$edge[j,1]
# we have to look in two different places for cont trait values, either in the cont.trait vector
# (if the node is a tip) or in the ASR if it is an interior node
if(node.o.int <= n.taxa[s]){
one <- cont.trait[node.o.int]
}else{
one <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# we do the same for the tipward node
node.o.int <- trees$edge[j,2]
if(node.o.int <= n.taxa[s]){
two <- cont.trait[node.o.int]
}else{
two <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# to find the mean we avg the rootward and the tipward cont trait values
branch.means <- c(branch.means, mean(one, two))
# we create branch names by pasting the rootwward and tipward node labels together
branch.names <- c(branch.names, paste(as.character(trees$edge[j,1]),as.character(trees$edge[j,2])))
}
# we name the branch names for nice bookkeeping
names(branch.means) <- branch.names
rm(branch.names)
# finding upper and lower quartiles
upper <- summary(branch.means)[[5]]
lower <- summary(branch.means)[[2]]
alt.tree <- trees
# we then manipulate the branch lengths of those branches whose cont trait means are in the upper or lower quartiles
for(j in 1:length(branch.means)){
if(branch.means[j] < lower){alt.tree$edge.length[j] <- alt.tree$edge.length[j] / scale.factor}
if(branch.means[j] > upper){alt.tree$edge.length[j] <- alt.tree$edge.length[j] * scale.factor}
}
# next we simulated a discrete trait on this altered tree
# while loop is set up to make sure sufficient transitions occur on the tree
good.sim <- F
# count <- 0
rate <- .1
# withTimeout({
while(good.sim == F){
disc.trait <- sim.char(phy = alt.tree,
par = matrix(c(-rate, 0, rate, 0), 2),
model = 'discrete',
root = 1)
if(5 < sum(disc.trait == min(disc.trait)) &&
sum(disc.trait == min(disc.trait)) < (n.taxa[s] - 5)){
good.sim <- T
# if(message == T){cat(min(disc.trait), max(disc.trait), ' good sim ')}
}
# if(message == T && count %% 50 == 0){cat(min(disc.trait),
#                                          max(disc.trait),
#                                          '    ',
#                                          sum(disc.trait == min(disc.trait)),
#                                          '      ')}
# count <- count + 1
} # }, timeout = 360, onTimeout = "error")
if(message == T){cat('\n')}
# we now apply the AncCond test to our simulated data and record its result
dat <- cbind(alt.tree$tip.label, cont.trait, disc.trait)
# withTimeout({
rslt <- AncCond(trees = trees,
data = dat,
drop.state = 2,
mat = c(0,0,1,0),
pi = c(1,0),
message = F)# },
# timeout = 600, onTimeout = "error")
# saving results in arrays
# p.val.array[t,s] <- rslt$pval
if(message == T){cat('\n')}
# closting the while loop if all goes well
# good.tree <- T
# }, error = function(e){good.tree <- F})
# }
if(message == T){
cat('\n')
cat(' t = ', t)
}
p.val.vec[t] <- rslt$pval
}
if(message == T){
cat('\n')
cat(' s = ', s)
}
p.val.vec
# end <- sys.time
}
fig3.data <- p.val.array
save(fig3.data, file = 'AncCondFig3DataPostBlackmon2.RData')
n.trees <- 100
scale.factor <- 5
n.taxa <- seq(20, 200, length.out = 10)
message <- T
source('AncCond.R', local = TRUE)
##### Making fig3 ######
## this will hold the p.val for each of 100 tests for the 10 tree sizes
# p.val.array <- array(dim = c(n.trees, 10))
# this time we vary the size of the tree
p.val.array <-foreach(s = 1:length(n.taxa), .options.multicore=opts, .combine = 'cbind',
.packages=c("phytools","diversitree","geiger")) %dopar%{
p.val.vec <- c()
# for each tree size we repeat the same analysis for the same number of trees
for(t in 1:n.trees){
# good.tree <- F
# while(good.tree == F){
# some trees take a real long time for simulating discrete traits due to incredibly short branch lengths where a transition
#   must occur. To get around this we added a timeout and trycatch. In the event of a tree that is taking an unacceptable time,
#   we begin back here by resimulating a tree
# tryCatch({
# We begin with a single tree and test it at every scaling factor then move to the next tree
# first the tree
trees <- trees(pars = c(3,1),
type = "bd",
n = 1,
max.taxa = n.taxa[s],
include.extinct = F)[[1]]
trees$edge.length <- trees$edge.length / max(branching.times(trees))
# we then simulate the continious character
cont.trait <- sim.char(trees, 0.2, model = 'BM')
names(cont.trait) <- trees$tip.label # this line somehow makes anc.ML work????
# identifying which branch had a mean cont trait value in the upper and lower quartiles
# we do this by 1st doing an ASR for the continious trait
cont.trait.AC <- anc.ML(trees, cont.trait, model = "BM")
# this will hold all of the branch means in the same order they are given in trees
branch.means <- c()
# branch names is essentially paste(rootward node, tipward node)
branch.names <- c()
# then for each branch we go through and calculate the name and mean
for(j in 1:nrow(trees$edge)){
# we first find the cont trait value at the rootward node
node.o.int <- trees$edge[j,1]
# we have to look in two different places for cont trait values, either in the cont.trait vector
# (if the node is a tip) or in the ASR if it is an interior node
if(node.o.int <= n.taxa[s]){
one <- cont.trait[node.o.int]
}else{
one <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# we do the same for the tipward node
node.o.int <- trees$edge[j,2]
if(node.o.int <= n.taxa[s]){
two <- cont.trait[node.o.int]
}else{
two <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# to find the mean we avg the rootward and the tipward cont trait values
branch.means <- c(branch.means, mean(one, two))
# we create branch names by pasting the rootwward and tipward node labels together
branch.names <- c(branch.names, paste(as.character(trees$edge[j,1]),as.character(trees$edge[j,2])))
}
# we name the branch names for nice bookkeeping
names(branch.means) <- branch.names
rm(branch.names)
# finding upper and lower quartiles
upper <- summary(branch.means)[[5]]
lower <- summary(branch.means)[[2]]
alt.tree <- trees
# we then manipulate the branch lengths of those branches whose cont trait means are in the upper or lower quartiles
for(j in 1:length(branch.means)){
if(branch.means[j] < lower){alt.tree$edge.length[j] <- alt.tree$edge.length[j] / scale.factor}
if(branch.means[j] > upper){alt.tree$edge.length[j] <- alt.tree$edge.length[j] * scale.factor}
}
# next we simulated a discrete trait on this altered tree
# while loop is set up to make sure sufficient transitions occur on the tree
good.sim <- F
# count <- 0
rate <- .15
# withTimeout({
while(good.sim == F){
disc.trait <- sim.char(phy = alt.tree,
par = matrix(c(-rate, 0, rate, 0), 2),
model = 'discrete',
root = 1)
if(5 < sum(disc.trait == min(disc.trait)) &&
sum(disc.trait == min(disc.trait)) < (n.taxa[s] - 5)){
good.sim <- T
# if(message == T){cat(min(disc.trait), max(disc.trait), ' good sim ')}
}
# if(message == T && count %% 50 == 0){cat(min(disc.trait),
#                                          max(disc.trait),
#                                          '    ',
#                                          sum(disc.trait == min(disc.trait)),
#                                          '      ')}
# count <- count + 1
} # }, timeout = 360, onTimeout = "error")
if(message == T){cat('\n')}
# we now apply the AncCond test to our simulated data and record its result
dat <- cbind(alt.tree$tip.label, cont.trait, disc.trait)
# withTimeout({
rslt <- AncCond(trees = trees,
data = dat,
drop.state = 2,
mat = c(0,0,1,0),
pi = c(1,0),
message = F)# },
# timeout = 600, onTimeout = "error")
# saving results in arrays
# p.val.array[t,s] <- rslt$pval
if(message == T){cat('\n')}
# closting the while loop if all goes well
# good.tree <- T
# }, error = function(e){good.tree <- F})
# }
if(message == T){
cat('\n')
cat(' t = ', t)
}
p.val.vec[t] <- rslt$pval
}
if(message == T){
cat('\n')
cat(' s = ', s)
}
p.val.vec
# end <- sys.time
}
