##### Origins Figure ##### ????????
##### Fig 3 #####
load('UniNtaxaDataTry2.RData')
fig3pt5.data <- fig3.data
load('Data/Fig3Data.RData')
# data <- cbind(rep(1:10, each = 100),
#               as.vector(fig2.data))
# colnames(data) <- c('Scale.Factor','Pval')
x <- rep(seq(from=20, to=200, by=20), each=100)
x <- jitter(x, factor=.9)
y <- vector()
for(i in 1:10){
y <- c(y, fig3.data[1:100, i])
}
probs <- vector()
for(i in 1:10){
probs[i] <- paste(as.character(sum(fig3.data[1:100, i] <= .05)),'%')
}
probsfp <- vector()
for(i in 1:10){
probsfp[i] <- paste(as.character(sum(fig3pt5.data[1:100, i] <= .05)), '%')
}
plot(x = (x+3), y = y, xlab="", ylab= "", xaxt="n",
pch=16,cex=.49, xlim=c(10, 210),
main = 'Unidirectional Evolution', adj = 0,
col = 'blue', ylim = c(0,.57))
x <- rep(seq(from=20, to=200, by=20), each=100)
x <- jitter(x, factor=.9)
y <- vector()
for(i in 1:10){
y <- c(y, fig3pt5.data[1:100, i])
}
points(x = (x-3), y = y, col = 'red', pch = 16, cex = .49)
mtext(probs,
side=3, at=seq(from=23, to=203, by=20),
cex=.7, col = 'blue')
mtext(probsfp, side = 3, at=seq(from=17, to=197, by=20),
cex = .7, col = 'red')
mtext(c(20,40,60,80,100,120,140,160,180,200), side=1,
at=c(20,40,60,80,100,120,140,160,180,200), cex=.85)
mtext("Taxa", side=1, line=1)
mtext("p-value", side=2, line=2.2)
abline(h = .05, lty = 2, lwd = .7)
legend(x = 'topright',
legend = c('False Positive (No Correlation)',
'Power (Correlation)'),
col = c('red', 'blue'), pch = 16, bty = 'n')
##### Fig 4 #####
load('Data/Fig4Data.RData')
x <- rep(1:10, each=200)
x <- jitter(x, factor=1.5)
y <- vector()
for(j in 1:10){
for(i in 1:100){
y[2 * (100 * (j - 1) + i - 1) + 1] <- as.numeric(gsub(",.*", "",fig4.data[i,j]))
y[2 * (100 * (j - 1) + i - 1) + 2] <- as.numeric(substr(fig4.data[i,j], (nchar(gsub(",.*", "",fig4.data[i,j])) + 2),
nchar(fig4.data[i,j])))
}
}
probs <- vector()
probs2 <- c()
for(i in 1:10){
probs[i] <- paste(
as.character(
round(100 * sum(y[(200 * (i - 1) + 1):(200 * i)] <= .025, na.rm = T) / sum(!is.na(y[(200 * (i - 1) + 1):(200 * i)])),
digits = 0)),'%')
probs2[i] <- paste(
as.character(
round(100 * sum(y[(200 * (i - 1) + 1):(200 * i)] <= .05, na.rm = T) / sum(!is.na(y[(200 * (i - 1) + 1):(200 * i)])),
digits = 0)),'%')
}
plot(x = x, y = y, xaxt="n",xlab="",
ylab= "", pch=16,cex=.49,
main = 'Bidirectional Evolution', adj = 0,
ylim = c(0,.57))
points(x = x[1:200], y = y[1:200], pch = 16,
cex = .49, col = 'red')
points(x = x[201:2000], y = y[201:2000], pch = 16,
cex = .49, col = 'blue')
mtext(probs[1], side=3, at=1, cex=.7, col = 'red')
mtext(probs[2:10], side=3, at=2:10, cex=.7, col = 'blue')
# mtext(probs2, side = 3, at = 1:10, cex = .7, line = .6, col = 'red')
mtext(1:10, side=1, at=1:10, cex=.85)
mtext("Scaling Factor", side=1, line=1)
mtext("p-value", side=2, line=2.2)
abline(h = .025, lty = 2, lwd = .7)
# abline(h = .05, lty = 2, lwd = .7)
legend(x = 'topright',
legend = c('False Positive (No Correlation)',
'Power (Correlation)'),
col = c('red', 'blue'), pch = 16, bty = 'n')
##### Fig 5 #####
load('Data/Fig5Data.RData')
load('MC_BiNtaxa_fp.RData')
# with rate = 3 there is still 14%NA values. Should I go higher??? #
x <- rep(seq(from=20, to=200, by=20), each=200)
x <- jitter(x, factor=.9)
y <- vector()
for(i in 1:10){
for(j in 1:10){
for(i in 1:100){
y[2 * (100 * (j - 1) + i - 1) + 1] <- as.numeric(gsub(",.*", "",fig5.data[i,j]))
y[2 * (100 * (j - 1) + i - 1) + 2] <- as.numeric(substr(fig5.data[i,j], (nchar(gsub(",.*", "",fig5.data[i,j])) + 2),
nchar(fig5.data[i,j])))
}
}
}
probs <- vector()
probs2 <- vector()
for(i in 1:10){
probs[i] <- paste(
as.character(
round(100 * sum(y[(200 * (i - 1) + 1):(200 * i)] <= .025, na.rm = T) / sum(!is.na(y[(200 * (i - 1) + 1):(200 * i)])),
digits = 0)),'%')
probs2[i] <- paste(
as.character(
round(100 * sum(y[(200 * (i - 1) + 1):(200 * i)] <= .05, na.rm = T) / sum(!is.na(y[(200 * (i - 1) + 1):(200 * i)])),
digits = 0)),'%')
}
plot(x = (x+3), y = y, xlab="", ylab= "", xaxt="n",
pch=16,cex=.49, xlim=c(10, 210),
main = 'Bidirectional Evolution', adj = 0,
ylim = c(0,.57), col = 'blue')
x <- rep(seq(from=20, to=200, by=20), each=200)
x <- jitter(x, factor=.9)
y <- vector()
for(i in 1:10){
for(j in 1:10){
for(i in 1:100){
y[2 * (100 * (j - 1) + i - 1) + 1] <- as.numeric(gsub(",.*", "",fig5pt5.data[i,j]))
y[2 * (100 * (j - 1) + i - 1) + 2] <- as.numeric(substr(fig5pt5.data[i,j], (nchar(gsub(",.*", "",fig5pt5.data[i,j])) + 2),
nchar(fig5pt5.data[i,j])))
}
}
}
probsfp <- vector()
for(i in 1:10){
probsfp[i] <- paste(
as.character(
round(100 * sum(y[(200 * (i - 1) + 1):(200 * i)] <= .025, na.rm = T) / sum(!is.na(y[(200 * (i - 1) + 1):(200 * i)])),
digits = 0)),'%')
}
points(x = (x-3), y = y, col = 'red', pch = 16, cex = .49)
mtext(probs,
side=3, at=seq(from=23, to=203, by=20),
cex=.7, col = 'blue')
mtext(probsfp, side = 3, at=seq(from=17, to=197, by=20),
cex = .7, col = 'red')
# mtext(probs2,
#       side = 3, at=seq(from=20, to=200, by=20), cex = .7, line = .6)
mtext(c(20,40,60,80,100,120,140,160,180,200), side=1,
at=c(20,40,60,80,100,120,140,160,180,200), cex=.85)
mtext("Taxa", side=1, line=1)
mtext("p-value", side=2, line=2.2)
abline(h = .025, lty = 2, lwd = .7)
# abline(h = .05, lty = 2, lwd = .7)
legend(x = 'topright',
legend = c('False Positive (No Correlation)',
'Power (Correlation)'),
col = c('red', 'blue'), pch = 16, bty = 'n')
##### Fig 3 #####
load('UniNtaxaDataTry2.RData')
fig3pt5.data <- fig3.data
load('Data/Fig3Data.RData')
x <- rep(seq(from=20, to=200, by=20), each=100)
x <- jitter(x, factor=.9)
y <- vector()
for(i in 1:10){
y <- c(y, fig3.data[1:100, i])
}
probs <- vector()
for(i in 1:10){
probs[i] <- paste(as.character(sum(fig3.data[1:100, i] <= .05)),'%')
}
probsfp <- vector()
for(i in 1:10){
probsfp[i] <- paste(as.character(sum(fig3pt5.data[1:100, i] <= .05)), '%')
}
plot(x = (x+3), y = y, xlab="", ylab= "", xaxt="n",
pch=16,cex=.49, xlim=c(10, 210),
main = 'Unidirectional Evolution', adj = 0,
col = 'blue', ylim = c(0,.57))
x <- rep(seq(from=20, to=200, by=20), each=100)
x <- jitter(x, factor=.9)
y <- vector()
for(i in 1:10){
y <- c(y, fig3pt5.data[1:100, i])
}
points(x = (x-3), y = y, col = 'red', pch = 16, cex = .49)
mtext(probs,
side=3, at=seq(from=23, to=203, by=20),
cex=.7, col = 'blue')
mtext(probsfp, side = 3, at=seq(from=17, to=197, by=20),
cex = .7, col = 'red')
x <- rep(seq(from=20, to=200, by=20), each=100)
x <- jitter(x, factor=.9)
y <- vector()
for(i in 1:10){
y <- c(y, fig3.data[1:100, i])
}
probs <- vector()
for(i in 1:10){
probs[i] <- paste(as.character(sum(fig3pt5.data[1:100, i] <= .05)),'%')
}
probsfp <- vector()
for(i in 1:10){
probsfp[i] <- paste(as.character(sum(fig3pt5.data[1:100, i] <= .05)), '%')
}
plot(x = (x+3), y = y, xlab="", ylab= "", xaxt="n",
pch=16,cex=.49, xlim=c(10, 210),
main = 'Unidirectional Evolution', adj = 0,
col = 'blue', ylim = c(0,.57))
x <- rep(seq(from=20, to=200, by=20), each=100)
x <- jitter(x, factor=.9)
y <- vector()
for(i in 1:10){
y <- c(y, fig3pt5.data[1:100, i])
}
points(x = (x-3), y = y, col = 'red', pch = 16, cex = .49)
##### Fig 3 #####
load('UniNtaxaDataTry2.RData')
fig3pt5.data <- fig3.data
load('Data/Fig3Data.RData')
##### Fig 3 #####
load('Data/Fig3pt5Data.RData')
fig3pt5.data <- fig3.data
load('Data/Fig3Data.RData')
x <- rep(seq(from=20, to=200, by=20), each=100)
x <- jitter(x, factor=.9)
y <- vector()
for(i in 1:10){
y <- c(y, fig3.data[1:100, i])
}
probs <- vector()
for(i in 1:10){
probs[i] <- paste(as.character(sum(fig3.data[1:100, i] <= .05)),'%')
}
probsfp <- vector()
for(i in 1:10){
probsfp[i] <- paste(as.character(sum(fig3pt5.data[1:100, i] <= .05)), '%')
}
plot(x = (x+3), y = y, xlab="", ylab= "", xaxt="n",
pch=16,cex=.49, xlim=c(10, 210),
main = 'Unidirectional Evolution', adj = 0,
col = 'blue', ylim = c(0,.57))
x <- rep(seq(from=20, to=200, by=20), each=100)
x <- jitter(x, factor=.9)
y <- vector()
for(i in 1:10){
y <- c(y, fig3pt5.data[1:100, i])
}
points(x = (x-3), y = y, col = 'red', pch = 16, cex = .49)
mtext(probs,
side=3, at=seq(from=23, to=203, by=20),
cex=.7, col = 'blue')
mtext(probsfp, side = 3, at=seq(from=17, to=197, by=20),
cex = .7, col = 'red')
mtext(c(20,40,60,80,100,120,140,160,180,200), side=1,
at=c(20,40,60,80,100,120,140,160,180,200), cex=.85)
mtext("Taxa", side=1, line=1)
mtext("p-value", side=2, line=2.2)
abline(h = .05, lty = 2, lwd = .7)
legend(x = 'topright',
legend = c('False Positive (No Correlation)',
'Power (Correlation)'),
col = c('red', 'blue'), pch = 16, bty = 'n')
# install.packages("diversitree")
# install.packages("geiger")
# install.packages(c("Rmpi", 'doMPI'))
# library(doMPI)
# library(Rmpi)
library(R.utils)
library(phytools)
library(diversitree)
library(geiger)
library(doSNOW)
library(foreach)
cl<-makeCluster(3, type="SOCK")
on.exit(stopCluster(cl))
opts <- list(preschedule = FALSE)
registerDoSNOW(cl)
n.trees <- 100
scale.factor <- 5
n.taxa <- 200
miss <- seq(5,50, length.out = 10)
message <- T
source('AncCond.R', local = TRUE)
##### Making fig3 ######
s=1
p.val.vec <- c()
# for each tree size we repeat the same analysis for the same number of trees
for(t in 1:n.trees){
# good.tree <- F
# while(good.tree == F){
# some trees take a real long time for simulating discrete traits due to incredibly short branch lengths where a transition
#   must occur. To get around this we added a timeout and trycatch. In the event of a tree that is taking an unacceptable time,
#   we begin back here by resimulating a tree
# tryCatch({
# We begin with a single tree and test it at every scaling factor then move to the next tree
# first the tree
trees <- trees(pars = c(3,1),
type = "bd",
n = 1,
max.taxa = n.taxa,
include.extinct = F)[[1]]
trees$edge.length <- trees$edge.length / max(branching.times(trees))
# we then simulate the continious character
cont.trait <- sim.char(trees, 0.2, model = 'BM')
names(cont.trait) <- trees$tip.label # this line somehow makes anc.ML work????
cont.trait[sample.int(200, size = (miss[s] * n.taxa / 100))] <- NA
cont.trait.save <- cont.trait
cont.trait <- cont.trait[!is.na(cont.trait)]
# identifying which branch had a mean cont trait value in the upper and lower quartiles
# we do this by 1st doing an ASR for the continious trait
cont.trait.AC <- anc.ML(trees, cont.trait, model = "BM")
# this will hold all of the branch means in the same order they are given in trees
branch.means <- c()
# branch names is essentially paste(rootward node, tipward node)
branch.names <- c()
# then for each branch we go through and calculate the name and mean
for(j in 1:nrow(trees$edge)){
# we first find the cont trait value at the rootward node
node.o.int <- trees$edge[j,1]
# we have to look in two different places for cont trait values, either in the cont.trait vector
# (if the node is a tip) or in the ASR if it is an interior node
if(node.o.int <= n.taxa[s]){
one <- cont.trait[node.o.int]
}else{
one <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# we do the same for the tipward node
node.o.int <- trees$edge[j,2]
if(node.o.int <= n.taxa){
two <- cont.trait[node.o.int]
}else{
two <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# to find the mean we avg the rootward and the tipward cont trait values
if(sum(c(is.na(one), is.na(two))) == 0){
branch.means <- c(branch.means, mean(one, two))
}else if(is.na(one)){
branch.means <- c(branch.means, two)
}else if(is.na(two)){
branch.means <- c(branch.means, one)
}
# we create branch names by pasting the rootwward and tipward node labels together
branch.names <- c(branch.names, paste(as.character(trees$edge[j,1]),as.character(trees$edge[j,2])))
}
# we name the branch names for nice bookkeeping
names(branch.means) <- branch.names
rm(branch.names)
# finding upper and lower quartiles
upper <- summary(branch.means)[[5]]
lower <- summary(branch.means)[[2]]
alt.tree <- trees
# we then manipulate the branch lengths of those branches whose cont trait means are in the upper or lower quartiles
for(j in 1:length(branch.means)){
if(branch.means[j] < lower){alt.tree$edge.length[j] <- alt.tree$edge.length[j] / scale.factor}
if(branch.means[j] > upper){alt.tree$edge.length[j] <- alt.tree$edge.length[j] * scale.factor}
}
# next we simulated a discrete trait on this altered tree
# while loop is set up to make sure sufficient transitions occur on the tree
good.sim <- F
# count <- 0
rate <- .1
# withTimeout({
while(good.sim == F){
disc.trait <- sim.char(phy = alt.tree,
par = matrix(c(-rate, rate, rate, -rate), 2),
model = 'discrete',
root = sample(c(1,2),1))
if(5 < sum(disc.trait == min(disc.trait)) &&
sum(disc.trait == min(disc.trait)) < (n.taxa - 5)){
good.sim <- T
# if(message == T){cat(min(disc.trait), max(disc.trait), ' good sim ')}
}
# if(message == T && count %% 50 == 0){cat(min(disc.trait),
#                                          max(disc.trait),
#                                          '    ',
#                                          sum(disc.trait == min(disc.trait)),
#                                          '      ')}
# count <- count + 1
} # }, timeout = 360, onTimeout = "error")
if(message == T){cat('\n')}
# we now apply the AncCond test to our simulated data and record its result
dat <- cbind(alt.tree$tip.label, cont.trait.save, disc.trait)
# withTimeout({
rslt <- AncCond(trees = trees,
data = dat,
message = F)# },
# timeout = 600, onTimeout = "error")
# saving results in arrays
# p.val.array[t,s] <- rslt$pval
if(message == T){cat('\n')}
# closting the while loop if all goes well
# good.tree <- T
# }, error = function(e){good.tree <- F})
# }
if(message == T){
cat('\n')
cat(' t = ', t)
}
p.val.vec[t] <- rslt$pval
}
# good.tree <- F
# while(good.tree == F){
# some trees take a real long time for simulating discrete traits due to incredibly short branch lengths where a transition
#   must occur. To get around this we added a timeout and trycatch. In the event of a tree that is taking an unacceptable time,
#   we begin back here by resimulating a tree
# tryCatch({
# We begin with a single tree and test it at every scaling factor then move to the next tree
# first the tree
trees <- trees(pars = c(3,1),
type = "bd",
n = 1,
max.taxa = n.taxa,
include.extinct = F)[[1]]
trees$edge.length <- trees$edge.length / max(branching.times(trees))
# we then simulate the continious character
cont.trait <- sim.char(trees, 0.2, model = 'BM')
names(cont.trait) <- trees$tip.label # this line somehow makes anc.ML work????
cont.trait[sample.int(200, size = (miss[s] * n.taxa / 100))] <- NA
cont.trait.save <- cont.trait
cont.trait <- cont.trait[!is.na(cont.trait)]
# identifying which branch had a mean cont trait value in the upper and lower quartiles
# we do this by 1st doing an ASR for the continious trait
cont.trait.AC <- anc.ML(trees, cont.trait, model = "BM")
# this will hold all of the branch means in the same order they are given in trees
branch.means <- c()
# branch names is essentially paste(rootward node, tipward node)
branch.names <- c()
# then for each branch we go through and calculate the name and mean
for(j in 1:nrow(trees$edge)){
# we first find the cont trait value at the rootward node
node.o.int <- trees$edge[j,1]
# we have to look in two different places for cont trait values, either in the cont.trait vector
# (if the node is a tip) or in the ASR if it is an interior node
if(node.o.int <= n.taxa[s]){
one <- cont.trait[node.o.int]
}else{
one <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# we do the same for the tipward node
node.o.int <- trees$edge[j,2]
if(node.o.int <= n.taxa){
two <- cont.trait[node.o.int]
}else{
two <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# to find the mean we avg the rootward and the tipward cont trait values
if(sum(c(is.na(one), is.na(two))) == 0){
branch.means <- c(branch.means, mean(one, two))
}else if(is.na(one)){
branch.means <- c(branch.means, two)
}else if(is.na(two)){
branch.means <- c(branch.means, one)
}
# we create branch names by pasting the rootwward and tipward node labels together
branch.names <- c(branch.names, paste(as.character(trees$edge[j,1]),as.character(trees$edge[j,2])))
}
# we name the branch names for nice bookkeeping
names(branch.means) <- branch.names
rm(branch.names)
# finding upper and lower quartiles
upper <- summary(branch.means)[[5]]
lower <- summary(branch.means)[[2]]
alt.tree <- trees
# we then manipulate the branch lengths of those branches whose cont trait means are in the upper or lower quartiles
for(j in 1:length(branch.means)){
if(branch.means[j] < lower){alt.tree$edge.length[j] <- alt.tree$edge.length[j] / scale.factor}
if(branch.means[j] > upper){alt.tree$edge.length[j] <- alt.tree$edge.length[j] * scale.factor}
}
# next we simulated a discrete trait on this altered tree
# while loop is set up to make sure sufficient transitions occur on the tree
good.sim <- F
# count <- 0
rate <- .1
# withTimeout({
while(good.sim == F){
disc.trait <- sim.char(phy = alt.tree,
par = matrix(c(-rate, rate, rate, -rate), 2),
model = 'discrete',
root = sample(c(1,2),1))
if(5 < sum(disc.trait == min(disc.trait)) &&
sum(disc.trait == min(disc.trait)) < (n.taxa - 5)){
good.sim <- T
# if(message == T){cat(min(disc.trait), max(disc.trait), ' good sim ')}
}
# if(message == T && count %% 50 == 0){cat(min(disc.trait),
#                                          max(disc.trait),
#                                          '    ',
#                                          sum(disc.trait == min(disc.trait)),
#                                          '      ')}
# count <- count + 1
} # }, timeout = 360, onTimeout = "error")
if(message == T){cat('\n')}
# we now apply the AncCond test to our simulated data and record its result
dat <- cbind(alt.tree$tip.label, cont.trait.save, disc.trait)
# withTimeout({
rslt <- AncCond(trees = trees,
data = dat,
message = F)# },
if(message == T){cat('\n')}
# closting the while loop if all goes well
# good.tree <- T
# }, error = function(e){good.tree <- F})
# }
if(message == T){
cat('\n')
cat(' t = ', t)
}
p.val.vec[t] <- rslt$pval
