upper <- summary(branch.means)[[4]]
lower <- summary(branch.means)[[2]]
# next we perform the following analysis on this tree for each of the scaling factors
for(s in 1:10){
scale.factor <- s
# we leave the original trees un altered
alt.tree <- trees
# we then manipulate the branch lengths of those branches whose cont trait means are in the upper or lower quartiles
for(j in 1:length(branch.means)){
if(branch.means[j] < lower){alt.tree$edge.length[j] <- alt.tree$edge.length[j] / scale.factor}
if(branch.means[j] > upper){alt.tree$edge.length[j] <- alt.tree$edge.length[j] * scale.factor}
}
# next we simulated a discrete trait on this altered tree
####### Make sure par is set up correctly ######
# while loop is set up to make sure sufficient transitions occur on the tree
good.sim <- F
count <- 0
rate <- .02
#withTimeout({
while(good.sim == F){
disc.trait <- sim.char(phy = alt.tree,
par = matrix(c(-rate, rate, rate, -rate), 2),
model = 'discrete',
root = 1)
if((0.1 * n.taxa) < sum(disc.trait == min(disc.trait)) &&
sum(disc.trait == min(disc.trait)) < (0.9 * n.taxa)){
good.sim <- T
if(message == T){cat(min(disc.trait), max(disc.trait), ' good sim ')}
}
if(message == T && count %% 50 == 0){cat(min(disc.trait),
max(disc.trait),
'    ',
sum(disc.trait == min(disc.trait)),
'      ')}
count <- count + 1
}
#}, timeout = 1200, onTimeout = "error")
if(message == T){cat('\n')}
# we now apply the AncCond test to our simulated data and record its result
dat <- cbind(alt.tree$tip.label, cont.trait, disc.trait)
#withTimeout({
rslt <- AncCond(trees = trees,
data = dat,
message = F)# },
# timeout = 1200, onTimeout = "error")
# saving results in arrays
#p.val.array[t,s] <- rslt$pval
p.val.vec[s] <- rslt$pval
if(message == T){cat(' s = ', s)}
}
if(message == T){cat('\n')}
# closting the while loop if all goes well
good.tree <- T
#}, error = function(e){good.tree <- F})
}}
cnt <- 0
while(T == T){
p.val.vec <- c()
good.tree <- F
cnt <- cnt + 1
cat(cnt, '\n\n')
while(good.tree == F){
# some trees take a real long time for simulating discrete traits due to incredibly short branch lengths where a transition
#   must occur. To get around this we added a timeout and trycatch. In the event of a tree that is taking an unacceptable time,
#   we begin back here by resimulating a tree
#tryCatch({
# We begin with a single tree and test it at every scaling factor then move to the next tree
# first the tree
trees <- trees(pars = c(3,1),
type = "bd",
n = 1,
max.taxa = n.taxa,
include.extinct = F)[[1]]
trees$edge.length <- trees$edge.length / max(branching.times(trees))
# we then simulate the continious character
cont.trait <- sim.char(trees, 0.2, model = 'BM')
names(cont.trait) <- trees$tip.label # this line somehow makes anc.ML work????
# identifying which branch had a mean cont trait value in the upper and lower quartiles
# we do this by 1st doing an ASR for the continious trait
cont.trait.AC <- anc.ML(trees, cont.trait, model = "BM")
# this will hold all of the branch means in the same order they are given in trees
branch.means <- c()
# branch names is essentially paste(rootward node, tipward node)
branch.names <- c()
# then for each branch we go through and calculate the name and mean
for(j in 1:nrow(trees$edge)){
# we first find the cont trait value at the rootward node
node.o.int <- trees$edge[j,1]
# we have to look in two different places for cont trait values, either in the cont.trait vector
# (if the node is a tip) or in the ASR if it is an interior node
if(node.o.int <= n.taxa){
one <- cont.trait[node.o.int]
}else{
one <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# we do the same for the tipward node
node.o.int <- trees$edge[j,2]
if(node.o.int <= n.taxa){
two <- cont.trait[node.o.int]
}else{
two <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# to find the mean we avg the rootward and the tipward cont trait values
branch.means <- c(branch.means, mean(one, two))
# we create branch names by pasting the rootwward and tipward node labels together
branch.names <- c(branch.names, paste(as.character(trees$edge[j,1]),as.character(trees$edge[j,2])))
}
# we name the branch names for nice bookkeeping
names(branch.means) <- branch.names
rm(branch.names)
# finding upper and lower quartiles
upper <- summary(branch.means)[[4]]
lower <- summary(branch.means)[[2]]
# next we perform the following analysis on this tree for each of the scaling factors
for(s in 1:10){
scale.factor <- s
# we leave the original trees un altered
alt.tree <- trees
# we then manipulate the branch lengths of those branches whose cont trait means are in the upper or lower quartiles
for(j in 1:length(branch.means)){
if(branch.means[j] < lower){alt.tree$edge.length[j] <- alt.tree$edge.length[j] / scale.factor}
if(branch.means[j] > upper){alt.tree$edge.length[j] <- alt.tree$edge.length[j] * scale.factor}
}
# next we simulated a discrete trait on this altered tree
####### Make sure par is set up correctly ######
# while loop is set up to make sure sufficient transitions occur on the tree
good.sim <- F
count <- 0
rate <- .02
#withTimeout({
while(good.sim == F){
disc.trait <- sim.char(phy = alt.tree,
par = matrix(c(-rate, rate, rate, -rate), 2),
model = 'discrete',
root = 1)
if((0.1 * n.taxa) < sum(disc.trait == min(disc.trait)) &&
sum(disc.trait == min(disc.trait)) < (0.9 * n.taxa)){
good.sim <- T
if(message == T){cat(min(disc.trait), max(disc.trait), ' good sim ')}
}
if(message == T && count %% 50 == 0){cat(min(disc.trait),
max(disc.trait),
'    ',
sum(disc.trait == min(disc.trait)),
'      ')}
count <- count + 1
}
#}, timeout = 1200, onTimeout = "error")
if(message == T){cat('\n')}
# we now apply the AncCond test to our simulated data and record its result
dat <- cbind(alt.tree$tip.label, cont.trait, disc.trait)
#withTimeout({
rslt <- AncCond(trees = trees,
data = dat,
message = F)# },
# timeout = 1200, onTimeout = "error")
# saving results in arrays
#p.val.array[t,s] <- rslt$pval
p.val.vec[s] <- rslt$pval
if(message == T){cat(' s = ', s)}
}
if(message == T){cat('\n')}
# closting the while loop if all goes well
good.tree <- T
#}, error = function(e){good.tree <- F})
}
}
rslt$pval
data <- dat
## create named vector for disc trait for all taxa
dt.vec <- data[, 3]
names(dt.vec) <- data[, 1]
## create named vector for cont trait taxa not in derived state
if(!is.null(drop.state)){
ct.data <- data[data[, 3] != drop.state,]
ct.vec <- as.numeric(ct.data[, 2])
names(ct.vec) <- ct.data[, 1]
}else{
ct.data <- data
ct.vec <- as.numeric(ct.data[, 2])
names(ct.vec) <- ct.data[, 1]
}
mc = 1000
drop.state=NULL
mat=c(0,2,1,0)
pi="equal"
## create named vector for disc trait for all taxa
dt.vec <- data[, 3]
names(dt.vec) <- data[, 1]
## create named vector for cont trait taxa not in derived state
if(!is.null(drop.state)){
ct.data <- data[data[, 3] != drop.state,]
ct.vec <- as.numeric(ct.data[, 2])
names(ct.vec) <- ct.data[, 1]
}else{
ct.data <- data
ct.vec <- as.numeric(ct.data[, 2])
names(ct.vec) <- ct.data[, 1]
}
## ASR for the continuous trait
anc.states.cont.trait <- anc.ML(trees, ct.vec, model = "BM")
## ASR for discrete trait
## using stochastic mappings to nail down specific transition points
## if(!is.null(drop.state)){
###### should i add a timeout????? #######
###### change this to sim.char???  #######
anc.state.dt <- make.simmap(trees, dt.vec,
model = matrix(mat, 2),
nsim = 1,
pi = pi,
message = F
)
## Parse simmap to get producing nodes
# the mapped edge object has time spent in a state in
# two columns so only branches with a change have an entry
# in both columns
ss_nodes <- anc.state.dt$mapped.edge[, 1] > 0 &
anc.state.dt$mapped.edge[, 2] > 0
# this returns the node pairs describing a branch with origins
wanted_branches <- ss_nodes[ss_nodes == T]
wanted_nodes <- names(wanted_branches)
# now we take the rootward node of each branch and get rid of duplicates
wanted_nodes <- gsub(",.*", "", wanted_nodes)
producing.nodes <- unique(wanted_nodes)
## get the mean ancestral value for the cont trait
## at nodes producing the derived state marginalizing across trees
anc.states <- anc.states.cont.trait
orig.val <- mean(anc.states$ace[names(anc.states$ace) %in%
producing.nodes])
## Produce the null distribution of nodes in ancestral cond
null.orig.val <- vector(length = mc)
number.of.trans <- length(producing.nodes)
anc.dt <- anc.state.dt
anc.ct <- anc.states.cont.trait
node.states <- describe.simmap(anc.dt)$states
if(!is.null(drop.state)){
anc.cond.nodes <- anc.ct$ace[names(anc.ct$ace) %in%
names(node.states)[node.states != drop.state]]
}
if(is.null(drop.state)){
anc.cond.nodes <- anc.ct$ace[names(anc.ct$ace) %in% names(node.states)]
}
for (j in 1:mc){
null.orig.val[j] <- mean(sample(anc.cond.nodes,
length(producing.nodes)))
}
bigger <- (sum(null.orig.val >= orig.val) / mc)
smaller <- (sum(null.orig.val <= orig.val) / mc)
if (bigger < smaller){pval <- bigger}
if (smaller < bigger){pval <- smaller}
if (bigger <= smaller){pval <- bigger}
if (smaller < bigger){pval <- smaller}
## print results to terminal
if(message == T){cat(paste(
"Mean value for the continuous trait at origin of derived trait:",
round(orig.val, digits = 4),
"\n"
))
cat(paste("Number of producing nodes:", round(mean(number.of.trans),
digits = 4), "\n"))
cat(paste("Mean of null dist:", round(mean(null.orig.val),
digits = 4), "\n"))
cat(paste("SD of null dist:", round(sd(null.orig.val), digits = 4), "\n"))
cat(paste("pvalue:", round(pval, digits = 4), "\n\n"))
}
## return results to user
results <- list()
results[[1]] <- orig.val
results[[2]] <- number.of.trans
results[[3]] <- null.orig.val
results[[4]] <- pval
names(results) <- c("OriginatingVals", "NTrans",
"NullDist", "pval")
cnt <- 0
while(T == T){
p.val.vec <- c()
good.tree <- F
cnt <- cnt + 1
cat(cnt, '\n\n')
while(good.tree == F){
# some trees take a real long time for simulating discrete traits due to incredibly short branch lengths where a transition
#   must occur. To get around this we added a timeout and trycatch. In the event of a tree that is taking an unacceptable time,
#   we begin back here by resimulating a tree
#tryCatch({
# We begin with a single tree and test it at every scaling factor then move to the next tree
# first the tree
trees <- trees(pars = c(3,1),
type = "bd",
n = 1,
max.taxa = n.taxa,
include.extinct = F)[[1]]
trees$edge.length <- trees$edge.length / max(branching.times(trees))
# we then simulate the continious character
cont.trait <- sim.char(trees, 0.2, model = 'BM')
names(cont.trait) <- trees$tip.label # this line somehow makes anc.ML work????
# identifying which branch had a mean cont trait value in the upper and lower quartiles
# we do this by 1st doing an ASR for the continious trait
cont.trait.AC <- anc.ML(trees, cont.trait, model = "BM")
# this will hold all of the branch means in the same order they are given in trees
branch.means <- c()
# branch names is essentially paste(rootward node, tipward node)
branch.names <- c()
# then for each branch we go through and calculate the name and mean
for(j in 1:nrow(trees$edge)){
# we first find the cont trait value at the rootward node
node.o.int <- trees$edge[j,1]
# we have to look in two different places for cont trait values, either in the cont.trait vector
# (if the node is a tip) or in the ASR if it is an interior node
if(node.o.int <= n.taxa){
one <- cont.trait[node.o.int]
}else{
one <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# we do the same for the tipward node
node.o.int <- trees$edge[j,2]
if(node.o.int <= n.taxa){
two <- cont.trait[node.o.int]
}else{
two <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# to find the mean we avg the rootward and the tipward cont trait values
branch.means <- c(branch.means, mean(one, two))
# we create branch names by pasting the rootwward and tipward node labels together
branch.names <- c(branch.names, paste(as.character(trees$edge[j,1]),as.character(trees$edge[j,2])))
}
# we name the branch names for nice bookkeeping
names(branch.means) <- branch.names
rm(branch.names)
# finding upper and lower quartiles
upper <- summary(branch.means)[[4]]
lower <- summary(branch.means)[[2]]
# next we perform the following analysis on this tree for each of the scaling factors
for(s in 1:10){
scale.factor <- s
# we leave the original trees un altered
alt.tree <- trees
# we then manipulate the branch lengths of those branches whose cont trait means are in the upper or lower quartiles
for(j in 1:length(branch.means)){
if(branch.means[j] < lower){alt.tree$edge.length[j] <- alt.tree$edge.length[j] / scale.factor}
if(branch.means[j] > upper){alt.tree$edge.length[j] <- alt.tree$edge.length[j] * scale.factor}
}
# next we simulated a discrete trait on this altered tree
####### Make sure par is set up correctly ######
# while loop is set up to make sure sufficient transitions occur on the tree
good.sim <- F
count <- 0
rate <- .02
#withTimeout({
while(good.sim == F){
disc.trait <- sim.char(phy = alt.tree,
par = matrix(c(-rate, rate, rate, -rate), 2),
model = 'discrete',
root = 1)
if((0.1 * n.taxa) < sum(disc.trait == min(disc.trait)) &&
sum(disc.trait == min(disc.trait)) < (0.9 * n.taxa)){
good.sim <- T
if(message == T){cat(min(disc.trait), max(disc.trait), ' good sim ')}
}
if(message == T && count %% 50 == 0){cat(min(disc.trait),
max(disc.trait),
'    ',
sum(disc.trait == min(disc.trait)),
'      ')}
count <- count + 1
}
#}, timeout = 1200, onTimeout = "error")
if(message == T){cat('\n')}
# we now apply the AncCond test to our simulated data and record its result
dat <- cbind(alt.tree$tip.label, cont.trait, disc.trait)
#withTimeout({
rslt <- AncCond(trees = trees,
data = dat,
message = F)# },
# timeout = 1200, onTimeout = "error")
# saving results in arrays
#p.val.array[t,s] <- rslt$pval
p.val.vec[s] <- rslt$pval
if(message == T){cat(' s = ', s)}
}
if(message == T){cat('\n')}
# closting the while loop if all goes well
good.tree <- T
#}, error = function(e){good.tree <- F})
}}
# install.packages(c("Rmpi", 'doMPI'))
# library(doMPI)
# library(Rmpi)
library(R.utils)
library(phytools)
library(diversitree)
library(geiger)
library(doSNOW)
library(foreach)
cl<-makeCluster(3, type="SOCK")
on.exit(stopCluster(cl))
opts <- list(preschedule = FALSE)
registerDoSNOW(cl)
n.trees <- 100
n.taxa <- 200
message <- T
source('AncCond.R', local = TRUE)
cnt <- 0
while(T == T){
p.val.vec <- c()
good.tree <- F
cnt <- cnt + 1
cat(cnt, '\n\n')
while(good.tree == F){
# some trees take a real long time for simulating discrete traits due to incredibly short branch lengths where a transition
#   must occur. To get around this we added a timeout and trycatch. In the event of a tree that is taking an unacceptable time,
#   we begin back here by resimulating a tree
#tryCatch({
# We begin with a single tree and test it at every scaling factor then move to the next tree
# first the tree
trees <- trees(pars = c(3,1),
type = "bd",
n = 1,
max.taxa = n.taxa,
include.extinct = F)[[1]]
trees$edge.length <- trees$edge.length / max(branching.times(trees))
# we then simulate the continious character
cont.trait <- sim.char(trees, 0.2, model = 'BM')
names(cont.trait) <- trees$tip.label # this line somehow makes anc.ML work????
# identifying which branch had a mean cont trait value in the upper and lower quartiles
# we do this by 1st doing an ASR for the continious trait
cont.trait.AC <- anc.ML(trees, cont.trait, model = "BM")
# this will hold all of the branch means in the same order they are given in trees
branch.means <- c()
# branch names is essentially paste(rootward node, tipward node)
branch.names <- c()
# then for each branch we go through and calculate the name and mean
for(j in 1:nrow(trees$edge)){
# we first find the cont trait value at the rootward node
node.o.int <- trees$edge[j,1]
# we have to look in two different places for cont trait values, either in the cont.trait vector
# (if the node is a tip) or in the ASR if it is an interior node
if(node.o.int <= n.taxa){
one <- cont.trait[node.o.int]
}else{
one <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# we do the same for the tipward node
node.o.int <- trees$edge[j,2]
if(node.o.int <= n.taxa){
two <- cont.trait[node.o.int]
}else{
two <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# to find the mean we avg the rootward and the tipward cont trait values
branch.means <- c(branch.means, mean(one, two))
# we create branch names by pasting the rootwward and tipward node labels together
branch.names <- c(branch.names, paste(as.character(trees$edge[j,1]),as.character(trees$edge[j,2])))
}
# we name the branch names for nice bookkeeping
names(branch.means) <- branch.names
rm(branch.names)
# finding upper and lower quartiles
upper <- summary(branch.means)[[4]]
lower <- summary(branch.means)[[2]]
# next we perform the following analysis on this tree for each of the scaling factors
for(s in 1:10){
scale.factor <- s
# we leave the original trees un altered
alt.tree <- trees
# we then manipulate the branch lengths of those branches whose cont trait means are in the upper or lower quartiles
for(j in 1:length(branch.means)){
if(branch.means[j] < lower){alt.tree$edge.length[j] <- alt.tree$edge.length[j] / scale.factor}
if(branch.means[j] > upper){alt.tree$edge.length[j] <- alt.tree$edge.length[j] * scale.factor}
}
# next we simulated a discrete trait on this altered tree
####### Make sure par is set up correctly ######
# while loop is set up to make sure sufficient transitions occur on the tree
good.sim <- F
count <- 0
rate <- .02
#withTimeout({
while(good.sim == F){
disc.trait <- sim.char(phy = alt.tree,
par = matrix(c(-rate, rate, rate, -rate), 2),
model = 'discrete',
root = 1)
if((0.1 * n.taxa) < sum(disc.trait == min(disc.trait)) &&
sum(disc.trait == min(disc.trait)) < (0.9 * n.taxa)){
good.sim <- T
if(message == T){cat(min(disc.trait), max(disc.trait), ' good sim ')}
}
if(message == T && count %% 50 == 0){cat(min(disc.trait),
max(disc.trait),
'    ',
sum(disc.trait == min(disc.trait)),
'      ')}
count <- count + 1
}
#}, timeout = 1200, onTimeout = "error")
if(message == T){cat('\n')}
# we now apply the AncCond test to our simulated data and record its result
dat <- cbind(alt.tree$tip.label, cont.trait, disc.trait)
#withTimeout({
rslt <- AncCond(trees = trees,
data = dat,
message = F)# },
# timeout = 1200, onTimeout = "error")
# saving results in arrays
#p.val.array[t,s] <- rslt$pval
p.val.vec[s] <- rslt$pval
if(message == T){cat(' s = ', s)}
}
if(message == T){cat('\n')}
# closting the while loop if all goes well
good.tree <- T
#}, error = function(e){good.tree <- F})
}}
